{"ast":null,"code":"var _objectSpread = require(\"/home/aman/Desktop/Ethereum-Escrow/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _regeneratorRuntime = require(\"/home/aman/Desktop/Ethereum-Escrow/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/aman/Desktop/Ethereum-Escrow/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/aman/Desktop/Ethereum-Escrow/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/aman/Desktop/Ethereum-Escrow/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar HubAbi = require('../tabookey-gasless/IRelayHub');\n\nvar RecipientAbi = require('../tabookey-gasless/IRelayRecipient');\n\nvar BN = require('bignumber.js');\n\nvar _require = require('../utils'),\n    getApprovalData = _require.getApprovalData,\n    appendAddress = _require.appendAddress,\n    preconditionCodeToDescription = _require.preconditionCodeToDescription,\n    createRelayHubFromRecipient = _require.createRelayHubFromRecipient;\n\nvar _require2 = require('../tabookey-gasless/utils'),\n    getTransactionHash = _require2.getTransactionHash,\n    getTransactionSignature = _require2.getTransactionSignature;\n\nvar _require3 = require('../utils'),\n    getCallDataGas = _require3.getCallDataGas;\n\nvar TARGET_BALANCE = 2e18;\nvar MIN_BALANCE = 2e17;\nvar UNSTAKE_DELAY = 3600 * 24 * 7 * 4;\nvar ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';\nvar RELAY_STATE = Object.freeze({\n  Unknown: 0,\n  // The relay is unknown to the system: it has never been staked for\n  Staked: 1,\n  // The relay has been staked for, but it is not yet active\n  Registered: 2,\n  // The relay has registered itself, and is active (can relay calls)\n  Removed: 3 // The relay has been removed by its owner and can no longer relay calls. It must wait for its unstakeDelay to elapse before it can unstake\n\n});\n\nvar DevRelayClient = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function DevRelayClient(web3, ownerAddress, relayerAddress) {\n    var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    _classCallCheck(this, DevRelayClient);\n\n    this.ownerAddress = ownerAddress;\n    this.relayerAddress = relayerAddress;\n    this.txFee = opts.txFee || 10;\n    this.web3 = web3;\n    this.approveFunction = opts.approveFunction;\n    this.options = opts;\n    this.debug = opts.debug;\n  }\n\n  _createClass(DevRelayClient, [{\n    key: \"sendTransaction\",\n    value: function () {\n      var _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(payload) {\n        var _this = this;\n\n        var txParams, hub, nonce, gasPrice, gas, txHashToSign, signature, approvalData, requiredGas;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.ensureAccounts();\n\n              case 2:\n                // Start by registering in the relayer hub\n                txParams = payload.params[0];\n                _context.next = 5;\n                return createRelayHubFromRecipient(this.web3, txParams.to);\n\n              case 5:\n                hub = _context.sent;\n                _context.next = 8;\n                return this.isRegistered(hub);\n\n              case 8:\n                if (_context.sent) {\n                  _context.next = 12;\n                  break;\n                }\n\n                if (this.debug) console.log(\"Relayer is not registered yet. Registering...\");\n                _context.next = 12;\n                return this.register(hub);\n\n              case 12:\n                _context.t0 = parseInt;\n                _context.next = 15;\n                return hub.methods.getNonce(txParams.from).call();\n\n              case 15:\n                _context.t1 = _context.sent;\n                nonce = (0, _context.t0)(_context.t1);\n                _context.t2 = this.options.fixedGasPrice || txParams.gasPrice;\n\n                if (_context.t2) {\n                  _context.next = 22;\n                  break;\n                }\n\n                _context.next = 21;\n                return this.web3.eth.getGasPrice();\n\n              case 21:\n                _context.t2 = _context.sent;\n\n              case 22:\n                gasPrice = _context.t2;\n                _context.t3 = this.options.fixedGasLimit || txParams.gas;\n\n                if (_context.t3) {\n                  _context.next = 28;\n                  break;\n                }\n\n                _context.next = 27;\n                return this.estimateGas(txParams, hub.options.address);\n\n              case 27:\n                _context.t3 = _context.sent;\n\n              case 28:\n                gas = _context.t3;\n                _context.next = 31;\n                return this.validateRecipientBalance(hub, txParams.to, gas, gasPrice);\n\n              case 31:\n                if (this.debug) console.log(\"Recipient has enough balance to pay for meta tx\");\n                txHashToSign = getTransactionHash(txParams.from, txParams.to, txParams.data, this.txFee, gasPrice, gas, nonce, hub.options.address, this.relayerAddress);\n                _context.next = 35;\n                return getTransactionSignature(this.web3, txParams.from, txHashToSign);\n\n              case 35:\n                signature = _context.sent;\n                if (this.debug) console.log(\"Got transaction hash \".concat(txHashToSign, \" with signature \").concat(signature));\n                _context.next = 39;\n                return getApprovalData(txParams.approveFunction || this.approveFunction, {\n                  from: txParams.from,\n                  to: txParams.to,\n                  encodedFunctionCall: txParams.data,\n                  txFee: this.txFee,\n                  gasPrice: gasPrice,\n                  gas: gas,\n                  nonce: nonce,\n                  relayerAddress: this.relayerAddress,\n                  relayHubAddress: hub.options.address\n                });\n\n              case 39:\n                approvalData = _context.sent;\n                if (this.approvalData !== '0x' && this.debug) console.log(\"Approval data is \".concat(approvalData)); // Here the client would send the txParams, signature, and approvalData to the relayer\n                // Instead, we send it from the same process, posing as a relayer\n\n                _context.next = 43;\n                return this.validateCanRelay(hub, txParams, gasPrice, gas, nonce, signature, approvalData);\n\n              case 43:\n                if (this.debug) console.log(\"Can relay check succeeded\");\n                _context.t4 = BN;\n                _context.next = 47;\n                return hub.methods.requiredGas(gas.toString()).call();\n\n              case 47:\n                _context.t5 = _context.sent;\n                requiredGas = (0, _context.t4)(_context.t5).plus(getCallDataGas(txParams.data)).toString();\n                if (this.debug) console.log(\"Relaying transaction with gas \".concat(requiredGas));\n                return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  hub.methods.relayCall(txParams.from, txParams.to, txParams.data, _this.txFee, gasPrice, gas, nonce, signature, approvalData).send({\n                    from: _this.relayerAddress,\n                    gasPrice: gasPrice,\n                    gas: requiredGas\n                  }).on('transactionHash', function (txHash) {\n                    resolve(txHash);\n                  }).on('error', function (err) {\n                    reject(err);\n                  });\n                }));\n\n              case 51:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function sendTransaction(_x) {\n        return _sendTransaction.apply(this, arguments);\n      }\n\n      return sendTransaction;\n    }()\n  }, {\n    key: \"validateCanRelay\",\n    value: function () {\n      var _validateCanRelay = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(hub, txParams, gasPrice, gas, nonce, signature, approvalData) {\n        var status, recipientContext, _yield$hub$methods$ca;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return hub.methods.canRelay(this.relayerAddress, txParams.from, txParams.to, txParams.data, this.txFee, gasPrice, gas, nonce, signature, approvalData).call({\n                  from: this.relayerAddress\n                });\n\n              case 3:\n                _yield$hub$methods$ca = _context2.sent;\n                status = _yield$hub$methods$ca.status;\n                recipientContext = _yield$hub$methods$ca.recipientContext;\n                _context2.next = 11;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](0);\n                throw new Error(\"Error checking canRelay for transaction: \".concat(_context2.t0.message || _context2.t0));\n\n              case 11:\n                if (!(parseInt(status) !== 0)) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                throw new Error(\"Recipient canRelay call was rejected with \".concat(preconditionCodeToDescription(status)));\n\n              case 13:\n                return _context2.abrupt(\"return\", recipientContext);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 8]]);\n      }));\n\n      function validateCanRelay(_x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n        return _validateCanRelay.apply(this, arguments);\n      }\n\n      return validateCanRelay;\n    }()\n  }, {\n    key: \"estimateGas\",\n    value: function () {\n      var _estimateGas = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(txParams, hubAddress) {\n        var hub, txParamsFromHub;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (hubAddress) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                _context3.next = 3;\n                return createRelayHubFromRecipient(this.web3, txParams.to);\n\n              case 3:\n                hub = _context3.sent;\n                hubAddress = hub.options.address;\n\n              case 5:\n                txParamsFromHub = _objectSpread({}, txParams, {\n                  from: hubAddress,\n                  data: appendAddress(txParams.data, txParams.from)\n                });\n                return _context3.abrupt(\"return\", this.web3.eth.estimateGas(txParamsFromHub));\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function estimateGas(_x9, _x10) {\n        return _estimateGas.apply(this, arguments);\n      }\n\n      return estimateGas;\n    }()\n  }, {\n    key: \"validateRecipientBalance\",\n    value: function () {\n      var _validateRecipientBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(hub, recipient, gasLimit, gasPrice) {\n        var relayFee, balance, maxCharge;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                relayFee = this.txFee;\n                _context4.next = 3;\n                return hub.methods.balanceOf(recipient).call();\n\n              case 3:\n                balance = _context4.sent;\n\n                if (!BN(balance).isZero()) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Recipient \".concat(recipient, \" has no funds for paying for relayed calls on the relay hub.\"));\n\n              case 6:\n                _context4.next = 8;\n                return hub.methods.maxPossibleCharge(gasLimit, gasPrice, relayFee).call();\n\n              case 8:\n                maxCharge = _context4.sent;\n\n                if (!BN(maxCharge).isGreaterThan(BN(balance))) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                throw new Error(\"Recipient \".concat(recipient, \" has not enough funds for paying for this relayed call (has \").concat(balance, \", requires \").concat(maxCharge, \").\"));\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function validateRecipientBalance(_x11, _x12, _x13, _x14) {\n        return _validateRecipientBalance.apply(this, arguments);\n      }\n\n      return validateRecipientBalance;\n    }()\n  }, {\n    key: \"register\",\n    value: function () {\n      var _register = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(hub) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.ensureAccounts();\n\n              case 2:\n                _context5.next = 4;\n                return this.ensureStake(hub);\n\n              case 4:\n                _context5.next = 6;\n                return hub.methods.registerRelay(this.txFee.toString(), 'http://gsn-dev-relayer.openzeppelin.com/').send({\n                  from: this.relayerAddress\n                });\n\n              case 6:\n                if (this.debug) console.log(\"Registered relayer with address \".concat(this.relayerAddress));\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function register(_x15) {\n        return _register.apply(this, arguments);\n      }\n\n      return register;\n    }()\n  }, {\n    key: \"ensureStake\",\n    value: function () {\n      var _ensureStake = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(hub) {\n        var targetBalance,\n            minBalance,\n            currentStake,\n            target,\n            min,\n            _args6 = arguments;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                targetBalance = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : TARGET_BALANCE;\n                minBalance = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : MIN_BALANCE;\n                _context6.next = 4;\n                return this.ensureAccounts();\n\n              case 4:\n                _context6.next = 6;\n                return this.getCurrentStake(hub);\n\n              case 6:\n                currentStake = _context6.sent;\n                target = new BN(targetBalance);\n                min = new BN(minBalance);\n\n                if (!currentStake.gte(min)) {\n                  _context6.next = 12;\n                  break;\n                }\n\n                if (this.debug) console.log(\"Current stake \".concat(currentStake.toString(), \" is over minimum stake \").concat(min.toString()));\n                return _context6.abrupt(\"return\");\n\n              case 12:\n                if (this.debug) console.log(\"Staking to reach \".concat(targetBalance.toString()));\n                _context6.next = 15;\n                return hub.methods.stake(this.relayerAddress, UNSTAKE_DELAY.toString()).send({\n                  from: this.ownerAddress,\n                  value: target.minus(currentStake).toString()\n                });\n\n              case 15:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function ensureStake(_x16) {\n        return _ensureStake.apply(this, arguments);\n      }\n\n      return ensureStake;\n    }()\n  }, {\n    key: \"getCurrentStake\",\n    value: function () {\n      var _getCurrentStake = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(hub) {\n        var currentStake;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.ensureAccounts();\n\n              case 2:\n                _context7.prev = 2;\n                _context7.next = 5;\n                return hub.methods.getRelay(this.relayerAddress).call();\n\n              case 5:\n                currentStake = _context7.sent.totalStake;\n                _context7.next = 12;\n                break;\n\n              case 8:\n                _context7.prev = 8;\n                _context7.t0 = _context7[\"catch\"](2);\n                console.error(\"Error getting current relayer stake \".concat(_context7.t0.message));\n                currentStake = 0;\n\n              case 12:\n                return _context7.abrupt(\"return\", new BN(currentStake));\n\n              case 13:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[2, 8]]);\n      }));\n\n      function getCurrentStake(_x17) {\n        return _getCurrentStake.apply(this, arguments);\n      }\n\n      return getCurrentStake;\n    }()\n  }, {\n    key: \"isRegistered\",\n    value: function () {\n      var _isRegistered = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(hub) {\n        var currentState;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.prev = 0;\n                _context8.next = 3;\n                return hub.methods.getRelay(this.relayerAddress).call();\n\n              case 3:\n                currentState = _context8.sent.state;\n                _context8.next = 10;\n                break;\n\n              case 6:\n                _context8.prev = 6;\n                _context8.t0 = _context8[\"catch\"](0);\n                console.error(\"Error getting current relayer state \".concat(_context8.t0.message));\n                currentState = 0;\n\n              case 10:\n                return _context8.abrupt(\"return\", Number(currentState) === RELAY_STATE.Registered);\n\n              case 11:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[0, 6]]);\n      }));\n\n      function isRegistered(_x18) {\n        return _isRegistered.apply(this, arguments);\n      }\n\n      return isRegistered;\n    }()\n  }, {\n    key: \"ensureAccounts\",\n    value: function () {\n      var _ensureAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var web3, accounts;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!(this.ownerAddress && this.relayerAddress)) {\n                  _context9.next = 2;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\");\n\n              case 2:\n                // If the current provider is a PrivateKey one, then eth.getAccounts will return the account\n                // that corresponds to signKey. We need to bypass it to get the actual accounts found on the node.\n                web3 = this.web3.currentProvider.isPrivateKeyProvider ? new this.web3.constructor(this.web3.currentProvider.baseProvider) : this.web3; // Get all accounts and take the first two to use as relayer and owner\n\n                _context9.prev = 3;\n                _context9.next = 6;\n                return web3.eth.getAccounts();\n\n              case 6:\n                accounts = _context9.sent;\n                _context9.next = 12;\n                break;\n\n              case 9:\n                _context9.prev = 9;\n                _context9.t0 = _context9[\"catch\"](3);\n                throw new Error(\"Error getting accounts from local node for GSNDevProvider (\".concat(_context9.t0.message, \"). Please set them manually using the ownerAddress and relayerAddress options.\"));\n\n              case 12:\n                if (!(accounts.length < 2)) {\n                  _context9.next = 14;\n                  break;\n                }\n\n                throw new Error(\"Error setting up owner and relayer accounts for GSNDevProvider (at least two unlocked accounts are needed on the local node but found \".concat(accounts.length, \"). Please set them manually using the ownerAddress and relayerAddress options.\"));\n\n              case 14:\n                this.ownerAddress = this.ownerAddress || accounts[0];\n                this.relayerAddress = this.relayerAddress || accounts[1];\n\n              case 16:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[3, 9]]);\n      }));\n\n      function ensureAccounts() {\n        return _ensureAccounts.apply(this, arguments);\n      }\n\n      return ensureAccounts;\n    }()\n  }]);\n\n  return DevRelayClient;\n}();\n\nmodule.exports = DevRelayClient;","map":null,"metadata":{},"sourceType":"script"}
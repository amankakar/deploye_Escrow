{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/aman/Desktop/Ethereum-Escrow/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // TODO: Add React and React Hook linting rules\n\nvar react_1 = require(\"react\");\n\nvar providers = __importStar(require(\"../context/providers\"));\n\nvar Web3Context_1 = __importDefault(require(\"../context/Web3Context\"));\n\nvar forceUpdate_1 = __importDefault(require(\"../util/forceUpdate\"));\n\nfunction useWeb3Context(provider, options) {\n  // TODO: update the context when the options change\n  var _react_1$useState = react_1.useState(function () {\n    return new Web3Context_1.default(provider, options);\n  }),\n      _react_1$useState2 = _slicedToArray(_react_1$useState, 1),\n      context = _react_1$useState2[0];\n\n  var forceUpdate = forceUpdate_1.default();\n\n  function callForceUpdate() {\n    forceUpdate(42);\n  } // Causes components down the tree to re-render when any of the Web3Context properties change.\n\n\n  react_1.useEffect(function () {\n    context.on(Web3Context_1.default.NetworkIdChangedEventName, callForceUpdate);\n    context.on(Web3Context_1.default.AccountsChangedEventName, callForceUpdate);\n    context.on(Web3Context_1.default.ConnectionChangedEventName, callForceUpdate);\n    return function () {\n      context.off(Web3Context_1.default.NetworkIdChangedEventName, callForceUpdate);\n      context.off(Web3Context_1.default.AccountsChangedEventName, callForceUpdate);\n      context.off(Web3Context_1.default.ConnectionChangedEventName, callForceUpdate);\n    };\n  }, [context]);\n  react_1.useEffect(function () {\n    context.poll();\n    return function () {\n      context.stopPoll();\n    };\n  }, [context]);\n  return context;\n}\n\nexports.useWeb3Context = useWeb3Context;\n\nfunction useWeb3Injected(options) {\n  var _react_1$useState3 = react_1.useState(function () {\n    return providers.tryInjected();\n  }),\n      _react_1$useState4 = _slicedToArray(_react_1$useState3, 1),\n      provider = _react_1$useState4[0];\n\n  if (!provider) return undefined;\n  return useWeb3Context(provider, options);\n}\n\nexports.useWeb3Injected = useWeb3Injected;\n\nfunction useWeb3Network(connection, options) {\n  var _react_1$useState5 = react_1.useState(function () {\n    return providers.connection(connection);\n  }),\n      _react_1$useState6 = _slicedToArray(_react_1$useState5, 1),\n      provider = _react_1$useState6[0];\n\n  return useWeb3Context(provider, options);\n}\n\nexports.useWeb3Network = useWeb3Network;\n\nfunction useWeb3(fallbackConnection, options) {\n  var _react_1$useState7 = react_1.useState(function () {\n    try {\n      return providers.injected();\n    } catch (e) {\n      return providers.connection(fallbackConnection);\n    }\n  }),\n      _react_1$useState8 = _slicedToArray(_react_1$useState7, 1),\n      provider = _react_1$useState8[0];\n\n  return useWeb3Context(provider, options);\n}\n\nexports.useWeb3 = useWeb3;","map":null,"metadata":{},"sourceType":"script"}